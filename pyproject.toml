[build-system]
requires = ["hatchling>=1.25.0"]
build-backend = "hatchling.build"

[project]
name = "resobot-gw"
version = "0.1.0"
description = "Experimental gateway orchestrating concurrent AI Agents for Resonite via ResoBotMCP"
readme = "README.md"
requires-python = ">=3.13,<3.14"
license = { text = "MIT" }
authors = [
  { name = "Project Contributors" }
]
keywords = ["agents", "resonite", "gateway", "openai", "mcp"]
classifiers = [
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.13",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Typing :: Typed",
]
dependencies = [
  # OpenAI Agents SDK (confirmed)
  "openai-agents>=0.2.11",
  # Config validation
  "pydantic>=2.7",
  "pydantic-settings>=2.2",
]

[project.urls]
Homepage = "https://example.com/"

[project.scripts]
resobot-gw = "resobot_gw.__main__:main"
resobot-gw-openai = "resobot_gw.agents.openai_entry:main"

[tool.hatch.build]
include = [
  "src/resobot_gw/**",
  "README.md",
  "AGENTS.md",
]

[tool.hatch.build.targets.wheel]
packages = ["src/resobot_gw"]

[tool.hatch.envs.default]
python = "3.13"
dependencies = [
  "pytest>=8.2",
  "ruff>=0.5.0",
  "basedpyright>=1.19.0",
  "pytest-cov>=5.0.0",
  "mdformat>=0.7.17",
  "mdformat-gfm>=0.3.5",
]

[tool.hatch.envs.default.scripts]
format = "ruff format"
lint = "ruff check ."
typecheck = "basedpyright"
test = "pytest -q --cov=src --cov-report=term-missing:skip-covered --cov-report=xml"
mdfmt = "mdformat ."
mdfmt-check = "mdformat --check ."
run = "python -m resobot_gw run"

[tool.ruff]
line-length = 100
target-version = "py313"

[tool.ruff.lint]
preview = true
select = ["ALL"]
ignore = [
  "PLR2004",  # magic value comparisons (overzealous)
  "T201",     # allow print in CLI entrypoints
  "CPY001",   # do not enforce file headers (project policy)
  "ASYNC110", # allow simple sleep loop for noop runners
  "D401",     # imperative-mood docstrings not required
  "DOC201",   # return doc section not required for tiny factories
  "TRY003",   # allow literal messages in small ValueError
  "EM101",    # allow inline exception messages for clarity
  "DOC501",   # do not require Raises section in tiny docstrings
  "PLR6301",  # allow instance methods where clear
  "TC001",    # allow direct application imports
  "TC003",    # allow typing imports in runtime for simplicity
  "TRY300",   # no else block for simple returns
  "TRY400",   # use logger.error for expected config errors
  # Docstring presence rules are too heavy for small public API surfaces
  "D100",  # Missing docstring in public module
  "D101",  # Missing docstring in public class
  "D102",  # Missing docstring in public method
  "D103",  # Missing docstring in public function
  "D104",  # Missing docstring in public package
  "D105",  # Missing docstring in magic method
  "D107",  # Missing docstring in __init__
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["D", "ANN", "S101", "PLR2004", "T201", "INP001", "PLC2701", "PLR0913"]

[tool.pytest.ini_options]
pythonpath = ["src"]


[tool.basedpyright]
typeCheckingMode = "standard"
reportMissingTypeStubs = "none"
reportMissingImports = "none"
reportCallIssue = "none"
pythonVersion = "3.13"
pythonPlatform = "All"
include = ["src"]
venvPath = "."

[tool.coverage.run]
branch = true
source = ["src"]

[tool.coverage.report]
skip_empty = true
show_missing = true
exclude_lines = [
  "pragma: no cover",
  "if __name__ == .__main__.:",
]
